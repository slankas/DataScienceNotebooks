Proposed Schedule:
https://docs.google.com/spreadsheets/d/1Wp7wT7qBoUiluKVjtoLWtvSMAxmYu7JQVUPCCONxMNY/edit#gid=0
  -- need to show students how to do things ...


Data Strcutures: https://github.com/cs331ds/lectures/tree/completed


Almost all of these notebooks are simply "click" and "run"...
Look at https://jupyter4edu.github.io/jupyter-edu-book/catalogue.html
- fill in the blank for simple exercises
- target practice for a long sequence of steps
- tweak, tiddle, and frob  (have them repeat, but do something else)
- bug hunt - fix the following code


Topics to teach 

* command line programs
* vi / emacs: point the students to existing tutorials
  vim tutorial: https://www.openvim.com/
  https://danielmiessler.com/study/vim/


Specific ToDos in existing notebooks:
- 2 Types chart is overwhelming to someone who has never programmed
- 4 - add exercise on fixing code issues
- 6 (functions)
    - systematic investment plan case study
    - expand our procedureal design to talka bout breaking up steps into smaller chunks
    - pitfalls of global varables
- 7 (Strings) - do a better job of discussing representation at the outset.
- 9 (lists) - need more exercises
- 10 (tuples) - better explaination of how they fit in the big picture.
- 11 (iteration) - complete the section on common loop patterns
- 12 (dictionary)- need to solve exercises 
- 13 - sets - need exercises and solutions
- 15 - files - more exercises, solutions
     - add listing a directory structure as a case study.  Mention that it's recursion.  Stopping condition is when a directory has no subdirectories.  Don't follow links.  Use the seven steps for this....
     - More expansive homework problem - implement portions of the 'tree' command
- 16 - JSON - no exercises currently, describe case study

Data Representation
  - everything behind the scenes is ultimately a number (and that number is a sequence of bits)
  - images (rbg)
  - speech  / music
  - video
  - text


Advanced Functions
- explode/gather with * (list)
- explode/gather with ** (dictionary)
- immutable vs mutable arguments
- functions are first class citizens
- inner functions
- closures
- lambdas
- generators
- decorators
- https://note.nkmk.me/en/python-filter-usage/
  filtering a list, but also realize simpler, more readable code is probably better

Testing
https://pages.github.ncsu.edu/engr-csc116-staff/CSC116-Materials/testing/version/6.0.0/

CSC 116 Materials: https://pages.github.ncsu.edu/engr-csc116-staff/CSC116-Materials/
Ballik's course: https://pages.github.ncsu.edu/engr-csc116-staff/Balik/Fall2022Schedule.html
https://pages.github.ncsu.edu/engr-csc116-staff/Schmidt/

ES115 - Intro to computing environments ...
-send email like https://it.pratt.duke.edu/




Rework string format exercises to avoid copyright issues / plagarism 

- need to have a lecture on iterables


Exercises to place....
- tip counter
- implement wc++
- Dictionary.  Count words. Print out the list...
- figure out change.  Use $20,$10,$5,$1,.5,.25,.1,.05,.01
- randomize buzz phrases
  -- https://whatthefuckismysocialmediastrategy.com/
  -- http://itsthisforthat.com/

Business case: https://danguetta.github.io/files/cases/dig.pdf


Advancaded topics not covered
BytesIO and StringIO - wraps in memory data to appear to be a file.  Do this this testing

Spark:
- O'Reilly: Data Algorithms with Spark

deep learning: https://learning.oreilly.com/library/view/deep-learning-with/9781617296864/

Data Structure Courses (with slides)
https://samyzaf.com/braude/DSAL/index.html


Create an Acknowledgement section:
